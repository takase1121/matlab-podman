#!/usr/bin/env bash

set -o noclobber -o nounset

getopt --test &>/dev/null
if [[ $? -ne 4 ]]; then
	echo "getopt too old to support all features"
	exit 1
fi

usage() {
	local PROGRAM_NAME
	PROGRAM_NAME="$(basename "$0")"
	echo "$PROGRAM_NAME: Run MATLAB in a container with VNC"
	echo "Usage:"
	echo "    $PROGRAM_NAME [OPTIONS]"
	echo "    $PROGRAM_NAME [OPTIONS] -- [IMAGE ARGUMENTS]"
	echo
	echo "Options:"
	echo "-v,--mount                Mounts a path to the container. This follows podman's -v and --mount syntax respectively."
	echo "-b,--browser              Uses NoVNC instead of TigerVNC. (Default: unset)"
	echo "-B,--no-open-url          Do not use xdg-open to open the URL. (Default: unset)"
	echo "-s,--shm-size             SHM size. (Default: 512M)"
	echo "-d,--data-dir             Directory to be mounted as \$HOME/.matlab. (Default: $HOME/matlab-data) Put '-' to never mount .matlab"
	echo "-D,--no-mount-defaults    Do not mount anything automatically. (Default: unset)"
	echo "-a,--podman-args          Extra arguments to pass to podman. (Default: unset)"
	echo "-p,--password             Prompt for a password. (Default: \"matlab\")"
	echo "-i,--image                Image name. (Default: local/matlab-minimal)"
	echo "-w,--wait                 Wait for VNC viewer to exit and kill the container. (Default: unset) This is not supported for NoVNC, use -W instead."
	echo "-W,--watch                Terminate the container once all clients disconnected. (Default: unset)"
	echo "-x,--debug                Enable debug mode. (Default: unset)"
	echo "-h,--help                 Print this message."
	echo
}

main() {
	local podman_args
	local image_args

	local tmp
	local vnc_pid
	local novnc_url
	local container_id
	local password1
	local password2
	local exit_code
	
	local image
	local vnc_mode
	local shm_size
	local data_dir
	local password
	local wait_mode
	local no_open_url
	local no_mount_defaults

	image_args=()
	podman_args=()
	
	image=localhost/matlab-minimal
	vnc_mode=t
	shm_size=512M
	data_dir="$HOME/matlab-data"
	password=n
	wait_mode=n
	no_open_url=n
	no_mount_defaults=n

	novnc_url="http://127.0.0.1:6080/"
	vnc_pid=""

	local parsed
	local short_options
	local long_options
	
	short_options=v:bBs:d:Da:pi:wWxh
	long_options=mount:,browser,no-open-url,shm-size:,data-dir:,no-mount-defaults,podman-args:,password,image:,wait,watch,debug,help

	if ! parsed=$(getopt --options=$short_options --longoptions=$long_options --name "$(basename "$0")" -- "$@"); then
		usage
		exit 2
	fi

	# make sure getopt output are properly escaped
	eval set -- "$parsed"

	while [[ $# -gt 0 ]]; do
		case "$1" in
			-v|--mount)
				podman_args+=("$1$2")
				shift 2
				;;
			-b|--browser)
				vnc_mode=b
				shift
				;;
			-B|--no-open-url)
				no_open_url=y
				shift
				;;
			-s|--shm-size)
				shm_size="$2"
				shift 2
				;;
			-d|--data-dir)
				data_dir="$2"
				shift 2
				;;
			-D|--no-mount-defaults)
				no_mount_defaults=y
				shift
				;;
			-a|--podman-args)
				tmp=()
				# this avoids unexpected glob expansions
				read -r -a tmp <<< "$2"
				podman_args+=("${tmp[@]}")
				shift 2
				;;
			-p|--password)
				password=y
				shift
				;;
			-i|--image)
				image="$2"
				shift 2
				;;
			-w|--wait)
				wait_mode=w
				shift
				;;
			-W|--watch)
				wait_mode=W
				shift
				;;
			-x|--debug)
				set -x
				shift
				;;
			-h|--help)
				usage
				exit
				;;
			--)
				shift
				break
				;;
			*)
				# getopt will not allow this
				echo "Internal error"
				exit 3
				;;
		esac
	done

	image_args=("$@")

	[[ ${#image_args[@]} -eq 0 ]] && image_args+=("-vnc")
	if [[ ! "${image_args[*]}" =~ "-vnc" ]]; then
		echo "Error: non -vnc options are not supported"
		exit 1
	fi

	# password prompt
	if [[ $password == y ]]; then
		while true; do
			read -r -p -s "New password: " password1
			if [[ ${#password1} -ge 6 ]]; then break; fi
			echo "Password must be at least 6 characters long"
		done

		while true; do
			read -r -p -s "Retype password: " password2
			if [[ "$password1" == "$password2" ]]; then break; fi
			echo "Password does not match"
		done

		podman_args+=("--env" "PASSWORD=$password1")
	else
		password1=matlab
		password2=matlab
	fi

	# check if tigervnc is installed
	if [[ $vnc_mode == t ]]; then
		if ! command -v vncviewer &>/dev/null || ! command -v vncpasswd &>/dev/null; then
			echo "TigerVNC is not installed; Falling back to NoVNC"
			vnc_mode=b
		fi
	fi

	# set up mounts
	if [[ $no_mount_defaults == n ]]; then
		mkdir -p "$data_dir"
		# FIXME: find a way to avoid this
		podman_args+=("--security-opt" "label=type:container_runtime_t")
		podman_args+=("--mount" "type=bind,src=$data_dir,dst=/home/matlab/.matlab,rw=true")
		podman_args+=("--mount" "type=bind,src=$HOME,dst=/home/matlab/host.$USER,rw=true")
	fi

	# essential args
	podman_args+=("--detach" "--rm" "--shm-size" "$shm_size" "--userns" "keep-id")

	# ports
	podman_args+=("--publish" "5901:5901")
	[[ $vnc_mode == b ]] && podman_args+=("--publish" "6080:6080")

	# wait mode envs
	[[ $wait_mode == W ]] && podman_args+=("--env" "TERMINATE_ON_DISCONNECT=1")

	# run podman
	container_id=$(podman run "${podman_args[@]}" "$image" "${image_args[@]}")
	exit_code=$?

	if [[ $exit_code -ne 0 ]]; then
		echo "Error: podman exited with status $exit_code"
		exit $exit_code
	fi

	echo -e "Container ID:\t$container_id"

	# wait for the container to come online
	sleep 1

	if [[ $vnc_mode == b ]]; then
		# novnc does not redirect properly when custom password is set
		[[ $password == y ]] && novnc_url="http://127.0.0.1:6080/vnc.html?autoconnect=true&resize=remote"

		echo -e "NoVNC URL:\t$novnc_url"
		echo "Starting browser (If it didn't start go to the URL above)"
		if [[ $no_open_url == n ]] && command -v xdg-open &> /dev/null; then
			xdg-open "$novnc_url" &>/dev/null
		fi
	else
		echo "Starting vncviewer"
		vnc_passwd=$(mktemp)
		printf "%s\n%s\n\n" "$password1" "$password2" | vncpasswd "$vnc_passwd" &>/dev/null
		{ vncviewer -passwd "$vnc_passwd" 127.0.0.1::5901 &>/dev/null; rm -f "$vnc_passwd"; } &
		vnc_pid=$!
	fi

	echo

	if [[ $wait_mode == w ]] && [[ -n $vnc_pid ]]; then
		echo "Waiting for vncviewer to quit."
		echo "If the container isn't killed after quitting, please kill it with"
	elif [[ $wait_mode == W ]]; then
		echo "The container will be terminated once all clients are disconnected"
		echo "If it doesn't, run"
	elif [[ $wait_mode == w && -z $vnc_pid ]] || [[ $wait_mode == n ]]; then
		echo "Waiting is not supported or enabled; please kill the container with"
	fi

	echo -e "\tpodman kill $container_id"

	# wait for vncviewer to exit
	if [[ $wait_mode == w ]] && [[ -n $vnc_pid ]]; then
		wait $vnc_pid
		podman kill "$container_id" &>/dev/null
	fi
}

main "$@"